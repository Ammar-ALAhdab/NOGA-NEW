import { useReducer } from "react";

// The useObjectReducer hook takes initialState and attributeHandlers as parameters. initialState represents the
// initial state for the reducer, and attributeHandlers is an object containing attribute names as keys and attribute
// update handlers as values.

const useObjectReducer = (initialState, attributeHandlers) => {
  // initialState: the initial state for the reducer
  // attributeHandlers: an object containing attribute name as key and attribute update handler as value
  const [state, dispatch] = useReducer((currentState, action) => {
    const updatedAttribute = action.payload;
    return { ...currentState, [action.type]: updatedAttribute };
  }, initialState);

  // The attributeDispatchers object is generated by using Object.entries()
  // to convert the attributeHandlers object into an
  // array of entries. Each entry represents an attribute and its corresponding update handler.
  //  reduce() is then used to
  // iterate over each entry and create an attribute-specific dispatcher function.
  // The dispatcher function calls dispatch()
  // with an action object that has the attribute name as
  // the action type and the updated value as the action payload.

  const attributeDispatchers = Object.entries(attributeHandlers).reduce(
    (dispatchers, [attribute, handler]) => {
      dispatchers[attribute] = (value) =>
        dispatch({ type: attribute, payload: value });
      return dispatchers;
    },
    {}
  );

  // The useObjectReducer hook returns an object that includes 
  // the current state (state) and the attribute-specific
  //  dispatchers (...attributeDispatchers). By spreading attributeDispatchers,
  //  we can directly access and use the
  // individual attribute dispatchers in the component that uses this custom hook.

  return { state, ...attributeDispatchers };
};

export default useObjectReducer;
